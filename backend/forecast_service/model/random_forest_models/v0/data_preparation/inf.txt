# 1
df.dropna(inplace=True)

# 2
col_for_LE = [
    'competition_id', 'round', 'home_club_manager_name','away_club_manager_name', 'stadium', 'referee',
    'domestic_competition_id_home_club', 'stadium_name_home_club','domestic_competition_id_away_club',
    'stadium_name_away_club'
]
for col in col_for_LE:
    df[col] = df[col].astype('category').cat.codes

# 3
# Обробка дати
df['date'] = pd.to_datetime(df['date'])
df['year'] = df['date'].dt.year
df['month'] = df['date'].dt.month
df['day'] = df['date'].dt.day
df['dayofweek'] = df['date'].dt.dayofweek  # 0 - понеділок, 6 - неділя


# 4
# 4.1. Зібрати всі унікальні значення з обох колонок
unique_values = pd.unique(
    pd.concat([
        df['home_club_formation'].astype(str),
        df['away_club_formation'].astype(str)
    ])
)

# 4.2. Створити mapping
value_to_code = {val: i for i, val in enumerate(unique_values)}

# 4.3. Замапити коди на обидві колонки
df['home_club_formation_code'] = df['home_club_formation'].astype(str).map(value_to_code)
df['away_club_formation_code'] = df['away_club_formation'].astype(str).map(value_to_code)

# 5.
def parse_transfer_value(value):
    if pd.isnull(value):
        return None
    value = value.replace('€', '').replace('+', '').replace(' ', '')
    sign = -1 if '-' in value else 1
    value = value.replace('-', '')
    if value.endswith('m'):
        num = float(value[:-1]) * 1_000_000
    elif value.endswith('k'):
        num = float(value[:-1]) * 1_000
    else:
        num = float(value)
    return sign * num

# Приклад для DataFrame:
df['net_transfer_record_home_club_num'] = df['net_transfer_record_home_club'].apply(parse_transfer_value)
df['net_transfer_record_away_club_num'] = df['net_transfer_record_away_club'].apply(parse_transfer_value)

# 6
corr_col = [
    'competition_id', 'season', 'round', 'home_club_id',
    'away_club_id',
    'home_club_position', 'away_club_position', 'home_club_manager_name',
    'away_club_manager_name', 'stadium', 'attendance', 'referee',
    'domestic_competition_id_home_club', 'squad_size_home_club',
    'average_age_home_club', 'foreigners_number_home_club',
    'national_team_players_home_club', 'stadium_name_home_club',
    'stadium_seats_home_club',
    'last_season_home_club', 'domestic_competition_id_away_club',
    'squad_size_away_club', 'average_age_away_club',
    'foreigners_number_away_club', 'national_team_players_away_club',
    'stadium_name_away_club', 'stadium_seats_away_club',
    'last_season_away_club', 'country_id',
    'year', 'month', 'day', 'dayofweek',
    'home_club_formation_code', 'away_club_formation_code',
    'net_transfer_record_home_club_num',
    'net_transfer_record_away_club_num'
]


scaler = MinMaxScaler()
df_scaled = df.copy()
df_scaled[corr_col] = scaler.fit_transform(df[corr_col])